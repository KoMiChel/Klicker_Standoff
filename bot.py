import sqlite3 as sq
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ContentType
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# Objects bot, dispather
PAYMENTS_TOKEN = "#"
bot = Bot(token='#')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

#run
async def on_startup(_):
    try:
        print("Bot running")
        sql_start()
    except sq.Error as e:
        print(f"Error: {e}")

#connect to sql
def sql_start():
    try:
        global base, cur
        base = sq.connect('users_Click.db')
        cur = base.cursor()
        if base:
            print('users connect')
        base.execute("""CREATE TABLE IF NOT EXISTS users (
                    chat_id INTEGER PRIMARY KEY, nic TEXT DEFAULT –ù–µ—Ç,
                    balance FLOAT DEFAULT 0, premium TEXT DEFAULT –ù–µ—Ç
                )""")
        base.commit()
    except sq.Error as e:
        print(f"–ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def sql_read(message):

    chat_id = str(message.chat.id)
    cur.execute('SELECT * FROM users WHERE chat_id = ?', (chat_id,))
    result = cur.fetchone()

    if result is not None:
        caption = f'üí´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüí´\nüó£–ù–∏–∫: {result[1]}\nüí∞–ë–∞–ª–∞–Ω—Å: {result[2]} gold\nüî∏Premium: {result[3]}'
        return caption
    else:
        await bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands='start')
async def start(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é

    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    click_button = types.KeyboardButton('–ö–ª–∏–∫')
    menu_button = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    info_button = types.KeyboardButton('–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

    keyboard.add(click_button)
    keyboard.add(menu_button,info_button)

    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –≥–æ–ª–¥—É Standoff –∑–∞ –∫–ª–∏–∫–∏. –î–µ–Ω—å–≥–∏ —Å –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≥–æ–ª–¥—ã –≤ Standoff.', reply_markup=keyboard)

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_id = message.from_user.id
    print(chat_id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cur.execute('SELECT * FROM users WHERE chat_id = ?', (chat_id,))
    result = cur.fetchone()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü—É
    if result is None:
        base.execute("""INSERT INTO users (chat_id) VALUES (?)""", (chat_id,))
        base.commit()

# –ö–Ω–æ–ø–∫–∞ "–ö–ª–∏–∫"
@dp.message_handler(lambda message: message.text == '–ö–ª–∏–∫')
async def click(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥–ø–∏—Å–∫–∞ Premium
    cur.execute('SELECT premium FROM users WHERE chat_id = ?', (chat_id,))
    result = cur.fetchone()

    if result is not None and result[0] == '–î–∞':
        increment = 0.5
        cur.execute('SELECT balance FROM users WHERE chat_id = ?', (chat_id,))
        balance = cur.fetchone()[0]
        if (balance * 10) % 200 == 0:
            await message.answer('–≠—Ç–æ –≤–∞—à–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
    else:
        increment = 0.1
        cur.execute('SELECT balance FROM users WHERE chat_id = ?', (chat_id,))
        balance = cur.fetchone()[0]
        if (balance * 10) % 10 == 0:
            await message.answer('–≠—Ç–æ –≤–∞—à–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!')

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cur.execute("""UPDATE users SET balance = round(balance + ?, 1) WHERE chat_id = ?""", (increment, chat_id,))
    base.commit()

    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    click_button = types.KeyboardButton('–ö–ª–∏–∫')
    menu_button = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    info_button = types.KeyboardButton('–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    keyboard.add(click_button)
    keyboard.add(menu_button,info_button)

    await message.answer('–ö–ª–∏–∫ –∑–∞—Å—á–∏—Ç–∞–Ω.', reply_markup=keyboard)

# –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.message_handler(lambda message: message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def return_to_menu(message: types.Message):

    keyboard = InlineKeyboardMarkup(row_width=1, resize_keyboard=True)

    premium_button = InlineKeyboardButton('–ö—É–ø–∏—Ç—å premium', callback_data='premium')
    card_button = InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫', callback_data='nic')
    viv_button = InlineKeyboardButton('–û–±–º–µ–Ω—è—Ç—å –Ω–∞ –≥–æ–ª–¥—É', callback_data='viv')

    keyboard.add(premium_button, card_button, viv_button)

    user_menu = await sql_read(message)
    await bot.send_message(message.from_user.id, text = user_menu, reply_markup=keyboard)

class Form(StatesGroup):
    name = State()

@dp.callback_query_handler(lambda c: c.data == 'nic')
async def process_callback_nic(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫ –≤ Standoff:')
    await Form.name.set()

@dp.message_handler(state=Form.name)
async def process_nic(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∏–∫
    chat_id = message.from_user.id
    nic = message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cur.execute("""UPDATE users SET nic = ? WHERE chat_id = ?""", (nic, chat_id,))
    base.commit()

    await message.answer('–í–∞—à –Ω–∏–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.')
    await state.finish()  # –∑–∞–≤–µ—Ä—à–∏—Ç—å FSM context (—Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ)

# prices
PRICE = types.LabeledPrice(label="Premium", amount=100*100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)

@dp.callback_query_handler(lambda c: c.data == 'viv')
async def viv(callback_query: types.CallbackQuery):
    message = callback_query.message
    chat_id = str(message.chat.id)
    cur.execute('SELECT balance FROM users WHERE chat_id = ?', (chat_id,))
    balance = cur.fetchone()[0]
    print(balance)

    if balance < 1000:
        await bot.send_message(message.chat.id, "–î–ª—è –æ–±–º–µ–Ω–∞ –Ω—É–∂–Ω–æ –Ω–∞–∫–æ–ø–∏—Ç—å –±–æ–ª—å—à–µ 1000 gold")
    else:
        await bot.send_message(message.chat.id, "–û–±–º–µ–Ω –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    base.commit()

# buy
@dp.callback_query_handler(lambda c: c.data == 'premium')
async def buy(callback_query: types.CallbackQuery):
    message = callback_query.message

    await bot.send_message(message.chat.id,
                           "–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –≤ 5 —Ä–∞–∑ –±–æ–ª—å—à–µ gold –∑–∞ –∫–ª–∏–∫, –∞ —Ç–∞–∫–∂–µ —É–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–ª–∞–º—ã –≤ 4 —Ä–∞–∑–∞!")
    await bot.send_invoice(message.chat.id,
                           title="Premium –ø–æ–¥–ø–∏—Å–∫–∞",
                           description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ Premium",
                           provider_token=PAYMENTS_TOKEN,
                           currency="rub",
                           is_flexible=False,
                           prices=[PRICE],
                           start_parameter="premium-subscription",
                           payload="test-invoice-payload")

# pre checkout  (must be answered in 10 seconds)
@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


# successful payment
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    print("SUCCESSFUL PAYMENT:")

    chat_id = message.from_user.id
    cur.execute("""UPDATE users SET premium = '–î–∞' WHERE chat_id = ?""", (chat_id,))
    base.commit()

    payment_info = message.successful_payment.to_python()
    for k, v in payment_info.items():
        print(f"{k} = {v}")

    await bot.send_message(message.chat.id,"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å premium")


# run long-polling
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=False, on_startup=on_startup)

